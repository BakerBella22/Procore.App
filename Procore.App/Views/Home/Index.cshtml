@model IEnumerable<MAD.API.Procore.Endpoints.Projects.Models.Project>

@{
    ViewData["Title"] = "Extractor Patronum";
}

<h1>@ViewData["Title"]</h1>

<label for="projectDropdown">Select a Project:</label>
<select id="projectDropdown" name="projectDropdown" onchange="handleProjectSelection()">
    <option value="">--Select Project--</option>
    @foreach (var project in Model)
    {
        <option value="@project.Id">@project.Name (ID: @project.Id)</option>
    }
</select>

<div id="selectionOptions" style="display:none; margin-top: 15px;">
    <label>Select Option:</label>
    <button onclick="fetchData('inspections')">View Inspections</button>
    <button onclick="fetchData('observations')">View Observations</button>
</div>

<div id="filterOptions" style="display:none; margin-top: 15px;">
    <label for="statusFilter">Filter by Status:</label>
    <select id="statusFilter" name="statusFilter" onchange="applyFilter()">
        <option value="all">All</option>
        <option value="open">Open</option>
        <option value="closed">Closed</option>
        <option value="in review">In Review</option>
    </select>
</div>

<div id="resultDisplay" style="margin-top: 20px;">
    <!-- Results will be displayed here -->
</div>

<!-- Select button where format is string, input is coming from the export -->

<div style="margin-top: 20px;">
    <!-- Single Export PDF Button to test PDF generation -->
    <button onclick="exportSelectedObservations()">Export PDF for Selected Observations</button>
    <button onclick="exportSelectedInspections()">Export PDF for Selected Inspections</button>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css">

@section Scripts {
    <script>
        let allData = []; // Store all data initially
        let filteredData = []; // Store filtered data
        let currentPage = 1;
        const pageSize = 25;
        let currentType = '';

        function handleProjectSelection() {
            const projectDropdown = document.getElementById('projectDropdown');
            const selectedProjectId = projectDropdown.value;
            const selectionOptions = document.getElementById('selectionOptions');

            if (selectedProjectId) {
                selectionOptions.style.display = 'block';
            } else {
                selectionOptions.style.display = 'none';
                document.getElementById('resultDisplay').innerHTML = '';
            }
        }

        function updateFilterOptions(type) {
            const statusFilter = document.getElementById('statusFilter');
            const options = type === "inspections"
                ? ["all", "open", "closed", "in review"]
                : ["all", "open", "closed", "ready_for_review", "initiated"];

            statusFilter.innerHTML = options
                .map(status => `<option value="${status}">${capitalizeFirstLetter(status.replace("_", " "))}</option>`)
                .join("");
        }

        async function fetchData(type) {
            const projectId = document.getElementById('projectDropdown').value;
            const resultDisplay = document.getElementById('resultDisplay');
            const filterOptions = document.getElementById('filterOptions');

            if (!projectId) {
                alert("Please select a project.");
                return;
            }

            currentType = type;

            // Fetch all data
            const url = `/Home/GetAll${type.charAt(0).toUpperCase() + type.slice(1)}?projectId=${projectId}`;

            try {
                const response = await fetch(url);
                allData = await response.json(); // Store all data
                filteredData = [...allData]; // Initially, filtered data is the same as all data
                currentPage = 1; // Reset pagination
                displayResults(); // Display all data
                updateFilterOptions(type);
                filterOptions.style.display = 'block';
            } catch (error) {
                resultDisplay.innerHTML = `<p style="color: red;">Error fetching data: ${error.message}</p>`;
            }
        }

        function applyFilter() {
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            filteredData = statusFilter === 'all'
                ? [...allData] // Reset to all data if no filter is applied
                : allData.filter(item => item.status.toLowerCase() === statusFilter);

            currentPage = 1; // Reset to the first page
            displayResults(); // Display filtered data
        }

        function displayResults() {
            const resultDisplay = document.getElementById('resultDisplay');
            const paginatedData = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);

            let content = `
                <h3>${capitalizeFirstLetter(currentType)} (Page ${currentPage}):</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="border-bottom: 1px solid #000;">
                            <th style="text-align: left;">Select</th>
                            <th style="text-align: left;">ID</th>
                            <th style="text-align: left;">Name</th>
                            <th style="text-align: left;">Status</th>
                        </tr>
                    </thead>
                    <tbody>`;

            if (paginatedData.length === 0) {
                content += `
                    <tr>
                        <td colspan="4" style="text-align: center;">No ${currentType} found for this project.</td>
                    </tr>`;
            } else {
                paginatedData.forEach(item => {
                    const checkboxClass = currentType === 'inspections' ? 'inspection-checkbox' : 'observation-checkbox';
                    content += `
                        <tr>
                            <td>
                                <input type="checkbox" class="${checkboxClass}" value="${item.id}" />
                            </td>
                            <td>${item.id}</td>
                            <td>${item.name}</td>
                            <td>${capitalizeFirstLetter(item.status.replace("_", " ")) || 'N/A'}</td>
                        </tr>`;
                });
            }

            content += `
                    </tbody>
                </table>
                <div class="pagination-controls" style="margin-top: 10px;">
                    <button onclick="changePage(-1)" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
                    <button onclick="changePage(1)" ${paginatedData.length < pageSize ? 'disabled' : ''}>Next</button>
                </div>`;

            resultDisplay.innerHTML = content;
        }

        function changePage(direction) {
            currentPage += direction;
            displayResults(); // Display results for the new page
        }

        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        async function exportSelectedObservations() {
            const projectId = document.getElementById('projectDropdown').value;
            if (!projectId) {
                alert("Please select a project.");
                return;
            }

            // Collect all selected observation IDs
            const selectedObservations = Array.from(document.querySelectorAll('.observation-checkbox:checked'))
                .map(checkbox => checkbox.value);  // Collect the ID from the checkbox value

            if (selectedObservations.length === 0) {
                alert("Please select at least one observation.");
                return;
            }

            try {
                const response = await fetch('/Home/ExportSelectedObservations', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        projectId: parseInt(projectId),
                        observationIds: selectedObservations // Send the selected IDs
                    })
                });

                if (!response.ok) {
                    throw new Error(`Network response was not ok. Status: ${response.status}`);
                }

                const blob = await response.blob();
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = `Selected_Observations_Reports.zip`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);

            } catch (error) {
                console.error("Error during PDF export:", error);
                alert("Error: " + error.message);
            }
        }

        async function exportSelectedInspections() {
            const projectId = document.getElementById('projectDropdown').value;
            if (!projectId) {
                alert("Please select a project.");
                return;
            }

            // Collect all selected inspection IDs
            const selectedInspections = Array.from(document.querySelectorAll('.inspection-checkbox:checked'))
                .map(checkbox => checkbox.value);  // Collect the ID from the checkbox value

            if (selectedInspections.length === 0) {
                alert("Please select at least one inspection.");
                return;
            }

            try {
                const response = await fetch('/Home/ExportSelectedInspections', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        projectId: parseInt(projectId),
                        inspectionIds: selectedInspections // Send the selected IDs
                    })
                });

                if (!response.ok) {
                    throw new Error(`Network response was not ok. Status: ${response.status}`);
                }

                const blob = await response.blob();
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = `Selected_Inspections_Reports.zip`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);

            } catch (error) {
                console.error("Error during PDF export:", error);
                alert("Error: " + error.message);
            }
        }
    </script>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }

        th {
            border-bottom: 1px solid #000;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .pagination-controls {
            margin-top: 10px;
            text-align: center;
        }

            .pagination-controls button {
                padding: 5px 10px;
                margin: 0 5px;
            }
    </style>

}
